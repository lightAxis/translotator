<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="SE_8hpp" kind="file" language="C++">
    <compoundname>SE.hpp</compoundname>
    <includedby refid="LieOperator_8hpp" local="yes">include/translotator/lie/LieOperator.hpp</includedby>
    <invincdepgraph>
      <node id="2">
        <label>include/translotator/lie/LieOperator.hpp</label>
        <link refid="LieOperator_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>include/translotator/translotator.hpp</label>
        <link refid="translotator_8hpp_source"/>
      </node>
      <node id="1">
        <label>include/translotator/lie/SE.hpp</label>
        <link refid="SE_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structtranslotator_1_1lie_1_1LieOperator_3_01ObjectType_1_1SE__GROUP_00_01Type_01_4" prot="public">translotator::lie::LieOperator&lt; ObjectType::SE_GROUP, Type &gt;</innerclass>
    <innernamespace refid="namespacetranslotator">translotator</innernamespace>
    <innernamespace refid="namespacetranslotator_1_1lie">translotator::lie</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>The<sp/>MIT<sp/>License<sp/>(MIT)</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2024<sp/>Jiseok<sp/>Lee</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy<sp/>of<sp/>this<sp/>software</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in<sp/>the<sp/>Software<sp/>without<sp/>restriction,</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>and/or<sp/>sell<sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do<sp/>so,</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all<sp/>copies<sp/>or<sp/>substantial</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>THE<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>Created<sp/>on<sp/>Tue<sp/>Nov<sp/>19<sp/>2024</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>@file<sp/>:<sp/>SE.hpp</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetranslotator_1_1lie" kindref="compound">translotator::lie</ref></highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="33" refid="structtranslotator_1_1lie_1_1LieOperator_3_01ObjectType_1_1SE__GROUP_00_01Type_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtranslotator_1_1lie_1_1LieOperator" kindref="compound">LieOperator</ref>&lt;ObjectType::SE_GROUP,<sp/>Type&gt;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1SEGroup" kindref="compound">LieGroupType</ref><sp/>=<sp/><ref refid="classtranslotator_1_1SEGroup" kindref="compound">SEGroup&lt;N, Type&gt;</ref>;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1SquareMatrix" kindref="compound">LieAlgebraType</ref><sp/>=<sp/><ref refid="classtranslotator_1_1SquareMatrix" kindref="compound">SquareMatrix&lt;N + 1, Type&gt;</ref>;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1Vector" kindref="compound">VectorType</ref><sp/>=<sp/><ref refid="classtranslotator_1_1Vector" kindref="compound">Vector&lt;N == 2 ? 3 : 6, Type&gt;</ref>;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="structtranslotator_1_1lie_1_1LieOperator_3_01ObjectType_1_1SE__GROUP_00_01Type_01_4_1ab3e8bda0a4d637c5fe764929d5bb1058" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1Vector" kindref="compound">VectorType&lt;2&gt;</ref><sp/><ref refid="structtranslotator_1_1lie_1_1LieOperator_3_01ObjectType_1_1SE__GROUP_00_01Type_01_4_1ab3e8bda0a4d637c5fe764929d5bb1058" kindref="member">LieAlgebra2Vector</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1SquareMatrix" kindref="compound">LieAlgebraType&lt;2&gt;</ref><sp/>&amp;lieAlgebra)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1Vector" kindref="compound">VectorType&lt;2&gt;</ref>{{lieAlgebra(1,<sp/>0),</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lieAlgebra(0,<sp/>2),<sp/>lieAlgebra(1,<sp/>2)}};</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="structtranslotator_1_1lie_1_1LieOperator_3_01ObjectType_1_1SE__GROUP_00_01Type_01_4_1a00f7d9a91d405f6d13a2304033ecf85b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1Vector" kindref="compound">VectorType&lt;3&gt;</ref><sp/><ref refid="structtranslotator_1_1lie_1_1LieOperator_3_01ObjectType_1_1SE__GROUP_00_01Type_01_4_1a00f7d9a91d405f6d13a2304033ecf85b" kindref="member">LieAlgebra2Vector</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1SquareMatrix" kindref="compound">LieAlgebraType&lt;3&gt;</ref><sp/>&amp;lieAlgebra)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1Vector" kindref="compound">VectorType&lt;3&gt;</ref>{{lieAlgebra(2,<sp/>1),<sp/>lieAlgebra(0,<sp/>2),<sp/>lieAlgebra(1,<sp/>0),</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lieAlgebra(0,<sp/>3),<sp/>lieAlgebra(1,<sp/>3),<sp/>lieAlgebra(2,<sp/>3)}};</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="structtranslotator_1_1lie_1_1LieOperator_3_01ObjectType_1_1SE__GROUP_00_01Type_01_4_1a3836fe916b9978740b8cfcbfce87aca8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1SquareMatrix" kindref="compound">LieAlgebraType&lt;2&gt;</ref><sp/><ref refid="structtranslotator_1_1lie_1_1LieOperator_3_01ObjectType_1_1SE__GROUP_00_01Type_01_4_1a3836fe916b9978740b8cfcbfce87aca8" kindref="member">Vector2LieAlgebra</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1Vector" kindref="compound">VectorType&lt;2&gt;</ref><sp/>&amp;isomorphicVec)<sp/></highlight><highlight class="comment">//<sp/>[theta,<sp/>x,<sp/>y]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/>Type<sp/>O<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1SquareMatrix" kindref="compound">LieAlgebraType&lt;2&gt;</ref>{{O,<sp/>-isomorphicVec[0],<sp/>isomorphicVec[1],</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isomorphicVec[0],<sp/>O,<sp/>isomorphicVec[2],</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>O,<sp/>O,<sp/>O}};</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="structtranslotator_1_1lie_1_1LieOperator_3_01ObjectType_1_1SE__GROUP_00_01Type_01_4_1afec049ff131d0b556e12381687ae0232" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1SquareMatrix" kindref="compound">LieAlgebraType&lt;3&gt;</ref><sp/><ref refid="structtranslotator_1_1lie_1_1LieOperator_3_01ObjectType_1_1SE__GROUP_00_01Type_01_4_1afec049ff131d0b556e12381687ae0232" kindref="member">Vector2LieAlgebra</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1Vector" kindref="compound">VectorType&lt;3&gt;</ref><sp/>&amp;isomorphicVec)<sp/></highlight><highlight class="comment">//<sp/>[theta_x,<sp/>theta_y,<sp/>theta_z,<sp/>x,<sp/>y,<sp/>z]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/>Type<sp/>O<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1SquareMatrix" kindref="compound">LieAlgebraType&lt;3&gt;</ref>{{O,<sp/>-isomorphicVec[2],<sp/>isomorphicVec[1],<sp/>isomorphicVec[3],</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isomorphicVec[2],<sp/>O,<sp/>-isomorphicVec[0],<sp/>isomorphicVec[4],</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-isomorphicVec[1],<sp/>isomorphicVec[0],<sp/>O,<sp/>isomorphicVec[5],</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>O,<sp/>O,<sp/>O,<sp/>O}};</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="structtranslotator_1_1lie_1_1LieOperator_3_01ObjectType_1_1SE__GROUP_00_01Type_01_4_1ac332c7de5f2c19ee0b1b7987ba2a4d34" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1SEGroup" kindref="compound">LieGroupType&lt;2&gt;</ref><sp/><ref refid="structtranslotator_1_1lie_1_1LieOperator_3_01ObjectType_1_1SE__GROUP_00_01Type_01_4_1ac332c7de5f2c19ee0b1b7987ba2a4d34" kindref="member">Exp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1Vector" kindref="compound">VectorType&lt;2&gt;</ref><sp/>&amp;isomorphicVec)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/>Type<sp/>O<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/>Type<sp/>l<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>&amp;theta<sp/>=<sp/>isomorphicVec[0];</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(translotator::abs(theta)<sp/>&lt;<sp/>epsilon&lt;Type&gt;())</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1SEGroup" kindref="compound">LieGroupType&lt;2&gt;</ref>{<ref refid="classtranslotator_1_1SOGroup_1afc072e1aaa4dee4df8522c266199b5a1" kindref="member">SOGroup&lt;2, Type&gt;::identity</ref>(),<sp/><ref refid="classtranslotator_1_1Vector" kindref="compound">Vector&lt;2, Type&gt;</ref>{{isomorphicVec[1],<sp/>isomorphicVec[2]}}};</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>s_<sp/>=<sp/>translotator::sin(theta)<sp/>/<sp/>theta;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>c_<sp/>=<sp/>(l<sp/>-<sp/>translotator::cos(theta))<sp/>/<sp/>(theta);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1SquareMatrix" kindref="compound">SquareMatrix&lt;2, Type&gt;</ref><sp/>J{{s_,<sp/>-c_,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c_,<sp/>s_}};</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1SEGroup" kindref="compound">LieGroupType&lt;2&gt;</ref>{<ref refid="classtranslotator_1_1SOGroup" kindref="compound">SO2Group&lt;Type&gt;</ref>{isomorphicVec[0]},<sp/>J<sp/>*<sp/><ref refid="classtranslotator_1_1Vector" kindref="compound">Vector&lt;2, Type&gt;</ref>{{isomorphicVec[1],<sp/>isomorphicVec[2]}}};</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="118" refid="structtranslotator_1_1lie_1_1LieOperator_3_01ObjectType_1_1SE__GROUP_00_01Type_01_4_1a689f9d3e43801462c375b6cce1e2ed33" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1SEGroup" kindref="compound">LieGroupType&lt;3&gt;</ref><sp/><ref refid="structtranslotator_1_1lie_1_1LieOperator_3_01ObjectType_1_1SE__GROUP_00_01Type_01_4_1a689f9d3e43801462c375b6cce1e2ed33" kindref="member">Exp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1Vector" kindref="compound">VectorType&lt;3&gt;</ref><sp/>&amp;isomorphicVec)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>optimize<sp/>this<sp/>with<sp/>sympy<sp/>cse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/>Type<sp/>O<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/>Type<sp/>l<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1Vector" kindref="compound">Vector&lt;3, Type&gt;</ref><sp/>thetaVec<sp/>=<sp/>isomorphicVec.template<sp/>block&lt;0,<sp/>0,<sp/>3,<sp/>1&gt;().<ref refid="classtranslotator_1_1MatrixBase_1acb91e4a5737ace925a23c3f5e11e2532" kindref="member">cast2Vector</ref>();</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>theta<sp/>=<sp/>thetaVec.norm();</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1Vector" kindref="compound">Vector&lt;3, Type&gt;</ref><sp/>tVec<sp/>=<sp/>isomorphicVec.template<sp/>block&lt;3,<sp/>0,<sp/>3,<sp/>1&gt;().<ref refid="classtranslotator_1_1MatrixBase_1acb91e4a5737ace925a23c3f5e11e2532" kindref="member">cast2Vector</ref>();</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(translotator::abs(theta)<sp/>&lt;<sp/>epsilon&lt;Type&gt;())</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1SEGroup" kindref="compound">LieGroupType&lt;3&gt;</ref>{<ref refid="classtranslotator_1_1SOGroup_1afc072e1aaa4dee4df8522c266199b5a1" kindref="member">SOGroup&lt;3, Type&gt;::identity</ref>(),<sp/>tVec};</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>c_<sp/>=<sp/>(l<sp/>-<sp/>translotator::cos(theta))<sp/>/<sp/>(theta<sp/>*<sp/>theta);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>s_<sp/>=<sp/>(theta<sp/>-<sp/>translotator::sin(theta))<sp/>/<sp/>(theta<sp/>*<sp/>theta<sp/>*<sp/>theta);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1Vector" kindref="compound">Vector&lt;3, Type&gt;</ref><sp/>omega_cross_tVec<sp/>=<sp/>thetaVec.<ref refid="classtranslotator_1_1Vector_1ad4d229067b342d9e83699f9f4352a058" kindref="member">cross</ref>(tVec);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1Vector" kindref="compound">Vector&lt;3, Type&gt;</ref><sp/>omega_2cross_tVec<sp/>=<sp/>thetaVec.<ref refid="classtranslotator_1_1Vector_1ad4d229067b342d9e83699f9f4352a058" kindref="member">cross</ref>(omega_cross_tVec);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1SEGroup" kindref="compound">LieGroupType&lt;3&gt;</ref>{<ref refid="classtranslotator_1_1SOGroup" kindref="compound">SO3Group&lt;Type&gt;</ref>{thetaVec},</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tVec<sp/>+<sp/>c_<sp/>*<sp/>omega_cross_tVec<sp/>+<sp/>s_<sp/>*<sp/>omega_2cross_tVec};</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="146" refid="structtranslotator_1_1lie_1_1LieOperator_3_01ObjectType_1_1SE__GROUP_00_01Type_01_4_1a48edabcce686b33a7235b451125fe14d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1Vector" kindref="compound">VectorType&lt;2&gt;</ref><sp/><ref refid="structtranslotator_1_1lie_1_1LieOperator_3_01ObjectType_1_1SE__GROUP_00_01Type_01_4_1a48edabcce686b33a7235b451125fe14d" kindref="member">Log</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1SEGroup" kindref="compound">LieGroupType&lt;2&gt;</ref><sp/>&amp;lieGroup)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>theta<sp/>=<sp/>translotator::atan2(lieGroup.<ref refid="classtranslotator_1_1SEGroup_1afdf3246840129403ad5e0c1737f51538" kindref="member">rotation</ref>()(1,<sp/>0),<sp/>lieGroup.<ref refid="classtranslotator_1_1SEGroup_1afdf3246840129403ad5e0c1737f51538" kindref="member">rotation</ref>()(0,<sp/>0));</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(translotator::abs(theta)<sp/>&lt;<sp/>epsilon&lt;Type&gt;())</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1Vector" kindref="compound">VectorType&lt;2&gt;</ref>{{</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0),<sp/>lieGroup.translation()[0],<sp/>lieGroup.translation()[1]}};</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>theta_2<sp/>=<sp/>theta<sp/>*<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0.5);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>s_<sp/>=<sp/>theta_2<sp/>*<sp/>translotator::sin(theta)<sp/>/<sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1)<sp/>-<sp/>translotator::cos(theta));</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1SquareMatrix" kindref="compound">SquareMatrix&lt;2, Type&gt;</ref><sp/>J_inv{{s_,<sp/>theta_2,</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-theta_2,<sp/>s_}};</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1Vector" kindref="compound">Vector&lt;2, Type&gt;</ref><sp/>tVec<sp/>=<sp/>J_inv<sp/>*<sp/>lieGroup.translation();</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1Vector" kindref="compound">VectorType&lt;2&gt;</ref>{{theta,<sp/>tVec[0],<sp/>tVec[1]}};</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="168" refid="structtranslotator_1_1lie_1_1LieOperator_3_01ObjectType_1_1SE__GROUP_00_01Type_01_4_1a0d0492e789b891ebc533735f7435faaf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1Vector" kindref="compound">VectorType&lt;3&gt;</ref><sp/><ref refid="structtranslotator_1_1lie_1_1LieOperator_3_01ObjectType_1_1SE__GROUP_00_01Type_01_4_1a0d0492e789b891ebc533735f7435faaf" kindref="member">Log</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1SEGroup" kindref="compound">LieGroupType&lt;3&gt;</ref><sp/>&amp;lieGroup)</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1Vector" kindref="compound">Vector&lt;3, Type&gt;</ref><sp/>thetaVec<sp/>=<sp/><ref refid="structtranslotator_1_1lie_1_1LieOperator_3_01ObjectType_1_1SO__GROUP_00_01Type_01_4_1a253b80bd045cbc6b62cf8ed48daeea6b" kindref="member">LieOperator_SO&lt;Type&gt;::Log</ref>(lieGroup.<ref refid="classtranslotator_1_1SEGroup_1afdf3246840129403ad5e0c1737f51538" kindref="member">rotation</ref>());</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>theta<sp/>=<sp/>thetaVec.norm();</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(translotator::abs(theta)<sp/>&lt;<sp/>epsilon&lt;Type&gt;())</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1Vector" kindref="compound">VectorType&lt;3&gt;</ref>{{</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0),</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lieGroup.translation()[0],<sp/>lieGroup.translation()[1],<sp/>lieGroup.translation()[2]}};</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>a<sp/>=<sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1)<sp/>-<sp/>(theta<sp/>*<sp/>translotator::sin(theta))<sp/>/<sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(2)<sp/>*<sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1)<sp/>-<sp/>translotator::cos(theta))))<sp/>/<sp/>(theta<sp/>*<sp/>theta);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1Vector" kindref="compound">Vector&lt;3, Type&gt;</ref><sp/>omega_cross_t<sp/>=<sp/>thetaVec.<ref refid="classtranslotator_1_1Vector_1ad4d229067b342d9e83699f9f4352a058" kindref="member">cross</ref>(lieGroup.translation());</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1Vector" kindref="compound">Vector&lt;3, Type&gt;</ref><sp/>tVec<sp/>=<sp/>lieGroup.translation()<sp/>-<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0.5)<sp/>*<sp/>omega_cross_t<sp/>+<sp/>a<sp/>*<sp/>thetaVec.<ref refid="classtranslotator_1_1Vector_1ad4d229067b342d9e83699f9f4352a058" kindref="member">cross</ref>(omega_cross_t);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1Vector" kindref="compound">VectorType&lt;3&gt;</ref>{{thetaVec[0],<sp/>thetaVec[1],<sp/>thetaVec[2],</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tVec[0],<sp/>tVec[1],<sp/>tVec[2]}};</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="192" refid="structtranslotator_1_1lie_1_1LieOperator_3_01ObjectType_1_1SE__GROUP_00_01Type_01_4_1a941003f52a21c2dd6ee2ee7a54b76927" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1SEGroup" kindref="compound">LieGroupType&lt;2&gt;</ref><sp/><ref refid="structtranslotator_1_1lie_1_1LieOperator_3_01ObjectType_1_1SE__GROUP_00_01Type_01_4_1a941003f52a21c2dd6ee2ee7a54b76927" kindref="member">exp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1SquareMatrix" kindref="compound">LieAlgebraType&lt;2&gt;</ref><sp/>&amp;lieAlgebra)</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Exp(LieAlgebra2Vector(lieAlgebra));</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="202" refid="structtranslotator_1_1lie_1_1LieOperator_3_01ObjectType_1_1SE__GROUP_00_01Type_01_4_1ab1718b90763f84ff2a9f6491e6ea69e1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1SEGroup" kindref="compound">LieGroupType&lt;3&gt;</ref><sp/><ref refid="structtranslotator_1_1lie_1_1LieOperator_3_01ObjectType_1_1SE__GROUP_00_01Type_01_4_1ab1718b90763f84ff2a9f6491e6ea69e1" kindref="member">exp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1SquareMatrix" kindref="compound">LieAlgebraType&lt;3&gt;</ref><sp/>&amp;lieAlgebra)</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Exp(LieAlgebra2Vector(lieAlgebra));</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="212" refid="structtranslotator_1_1lie_1_1LieOperator_3_01ObjectType_1_1SE__GROUP_00_01Type_01_4_1ac7184a9be5d7674b15b26d26c4f25723" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1SquareMatrix" kindref="compound">LieAlgebraType&lt;2&gt;</ref><sp/><ref refid="structtranslotator_1_1lie_1_1LieOperator_3_01ObjectType_1_1SE__GROUP_00_01Type_01_4_1ac7184a9be5d7674b15b26d26c4f25723" kindref="member">log</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1SEGroup" kindref="compound">LieGroupType&lt;2&gt;</ref><sp/>&amp;lieGroup)</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Vector2LieAlgebra(Log(lieGroup));</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="222" refid="structtranslotator_1_1lie_1_1LieOperator_3_01ObjectType_1_1SE__GROUP_00_01Type_01_4_1a209b8b99f72edea3fe10b0661de548c0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1SquareMatrix" kindref="compound">LieAlgebraType&lt;3&gt;</ref><sp/><ref refid="structtranslotator_1_1lie_1_1LieOperator_3_01ObjectType_1_1SE__GROUP_00_01Type_01_4_1a209b8b99f72edea3fe10b0661de548c0" kindref="member">log</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtranslotator_1_1SEGroup" kindref="compound">LieGroupType&lt;3&gt;</ref><sp/>&amp;lieGroup)</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Vector2LieAlgebra(Log(lieGroup));</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>LieOperator_SE<sp/>=<sp/>LieOperator&lt;ObjectType::SE_GROUP,<sp/>Type&gt;;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>LieOperator_SEf<sp/>=<sp/>LieOperator_SE&lt;float&gt;;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>LieOperator_SEd<sp/>=<sp/>LieOperator_SE&lt;double&gt;;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>LieOperator_SEld<sp/>=<sp/>LieOperator_SE&lt;long<sp/>double&gt;;</highlight></codeline>
<codeline lineno="233"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="include/translotator/lie/SE.hpp"/>
  </compounddef>
</doxygen>
